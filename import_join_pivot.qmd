---
title: "Join and pivot"
author: Your name here
date: today
format: html
css: "site.css"
---

## Aims 
This practical exercises pivots and joins, continuing elements from the grouping and wrangling session. 

## Judgment - part two

#### Import the [data from the website](https://biostat2.uni.lu/practicals/data/judgments.tsv).

Assign to the name `judgments`.

```{r}
judgments <- read_tsv("https://biostat2.uni.lu/practicals/data/judgments.tsv",
                      col_types = list(start_date = col_date("%d/%m/%Y"),
                                       end_date = col_date("%d/%m/%Y"),
                                       gender = col_factor(),
                                       condition = col_factor()))
```


### Compute basic statistics for all moral dilemma columns. 


### Tip
You should have done the steps below in the [Wrangling and Grouping]() practical last week. Check your project for the code.


> Compute the mean, the median, the standard deviation as well as min and max values. Find meaningful short names for the functions such as `med` for  the median.

> Assign `judgments_stats` to the results.

```{r}
# Your answer in code


```


### Pivoting for readability, first convert to the long format

Take the results that are available in `judgments_stats` from the exercise and bring the data into the long format.

After this step, your tibble should contain two columns:

* The name of the moral dilemma and stats (in one column, such as `dog_mean`, `dog_sd` ...)
* The values of the stats by moral dilemma.

If you don't clean up the dilemma prefix, the names will be `moral_dilemma_dog_mean`, `moral_dilemma_dog_sd` etc...
Like in the `dplyr` lecture, use the option `names_prefix = ` in `pivot_longer()` to get rid of the identical prefix `moral_dilemma_` for every rows.

```{r}
# Your answer in code


```

#### Continue from the previous step, to pivot to the wider format again.

The stats of each dilemma will be individual columns, should look like this:

dilemma| mean | sd |   ...|
------:|-----:|---:|---|
dog    | 7.20 | 2.23 |...|
wallet | 7.42 | 2.01 |...|
...    | ...  | ... | ...|

```{r}
# Your answer in code








```

## Replace if/else statements through joins

The following code assigns the participants to an age group.
```{r}
judgments_copy <- judgments
for (i in seq(1, nrow(judgments_copy))){
  if(judgments_copy[i, "age"] <= 19){
   judgments_copy[i, "age_group"] <- "young"
  } else if(judgments_copy[i, "age"] <= 22){
   judgments_copy[i, "age_group"] <- "mid"
  } else if(judgments_copy[i, "age"] > 22){
   judgments_copy[i, "age_group"] <- "old"
  } else if(is.na(judgments_copy[i, "age"])){
   judgments_copy[i, "age_group"] <- "missing"
  } 
}











```

### Why is this code not a great solution to the problem?

> Your answer as text





### Rewrite the code above as a `case_when()` statement.

```{r}
# Your answer in code






```

### Rewrite the code with a rolling join
```{r}
# Your answer in code









```





